
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, classification_report

# Load dataset (Update file path if needed)
file_path = "Updated_Fertilizer_Prediction_Kerala.csv"  # Update path
df = pd.read_csv(file_path)

df.columns = df.columns.str.strip()
# Drop unnecessary column
df = df.drop(columns=['District'])


# Encode categorical features
label_encoders = {}
categorical_columns = ['SoilType', 'CropType', 'City', 'Fertilizer Name']

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le  # Store encoders for later decoding

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

# Define features and target variable
X = df.drop(columns=["Fertilizer Name"])  # Features
y = df["Fertilizer Name"]  # Target variable

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
y_pred = rf_model.predict(X_test)

# Convert predictions to nearest class labels
y_pred_rounded = np.round(y_pred).astype(int)

# Model Evaluation
mse = mean_squared_error(y_test, y_pred_rounded)
r2 = r2_score(y_test, y_pred_rounded)

print(f" Mean Squared Error (MSE): {mse}")
print(f" RÂ² Score: {r2}")

# Convert Regression Output to Classification Format for Accuracy Calculation
y_test_class = y_test.astype(int)

# Accuracy Score
accuracy = accuracy_score(y_test_class, y_pred_rounded)
print(f" Accuracy Score: {accuracy * 100:.2f}%")

# Classification Report
print("\n Classification Report:\n")
print(classification_report(y_test_class, y_pred_rounded))

# Feature Importance Plot
feature_importances = rf_model.feature_importances_
feature_names = X.columns

plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importances, y=feature_names, palette="viridis")
plt.xlabel("Feature Importance Score")
plt.ylabel("Features")
plt.title("Feature Importance in Fertilizer Recommendation Model")
plt.show()
