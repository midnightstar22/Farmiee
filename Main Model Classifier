# Fertilizer Recommendation System with Interactive Testing
# Google Colab Implementation

# Install required packages


# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib
from google.colab import files



# Load dataset (update path)
df = pd.read_csv('Updated_Fertilizer_Prediction_Kerala.csv')

# Data Cleaning
df.columns = df.columns.str.strip()
df = df.rename(columns={
    'Temparature': 'Temperature',
    'Phosphorous': 'Phosphorus',
    'Humidity ': 'Humidity'
})
df = df.drop(columns=['District'])

# Data Preprocessing
label_encoders = {}
categorical_cols = ['SoilType', 'CropType', 'City', 'Fertilizer Name']

for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Prepare features and target
X = df.drop(columns=['Fertilizer Name'])
y = df['Fertilizer Name']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, 
    test_size=0.2, 
    random_state=42,
    stratify=y
)

# Model Training
model = RandomForestClassifier(
    n_estimators=150,
    max_depth=10,
    min_samples_split=5,
    random_state=42,
    class_weight='balanced'
)
model.fit(X_train, y_train)

# Model Evaluation
y_pred = model.predict(X_test)
y_test_labels = label_encoders['Fertilizer Name'].inverse_transform(y_test)
y_pred_labels = label_encoders['Fertilizer Name'].inverse_transform(y_pred)

print(f"Model Accuracy: {accuracy_score(y_test_labels, y_pred_labels):.2%}")
print("\nClassification Report:")
print(classification_report(y_test_labels, y_pred_labels))

# Save Model
model_data = {
    'model': model,
    'label_encoders': label_encoders,
    'feature_names': list(X.columns),
    'fert_classes': label_encoders['Fertilizer Name'].classes_
}
joblib.dump(model_data, 'fertilizer_model.pkl')

# =============================================
# INTERACTIVE TESTING SECTION
# =============================================
print("\n" + "="*50)
print("FERTILIZER RECOMMENDATION TESTING")
print("="*50)

# Get encoder mappings for reference
soil_types = label_encoders['SoilType'].classes_
crop_types = label_encoders['CropType'].classes_
cities = label_encoders['City'].classes_

# Display available options
print("\nAvailable Soil Types:", list(soil_types))
print("Available Crop Types:", list(crop_types))
print("Available Cities:", list(cities))

# Function to get recommendation
def get_recommendation(input_data):
    # Convert categorical features
    input_data['SoilType'] = label_encoders['SoilType'].transform([input_data['SoilType']])[0]
    input_data['CropType'] = label_encoders['CropType'].transform([input_data['CropType']])[0]
    input_data['City'] = label_encoders['City'].transform([input_data['City']])[0]
    
    # Create DataFrame with correct column order
    input_df = pd.DataFrame([input_data])[X.columns]
    
    # Make prediction
    prediction = model.predict(input_df)[0]
    return label_encoders['Fertilizer Name'].inverse_transform([prediction])[0]

# Download model
files.download('fertilizer_model.pkl')
